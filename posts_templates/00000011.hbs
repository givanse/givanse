<b>DRAFT, Do not share yet please.</b><br>

<style>
  .row_max_w {
    max-width: 1024px;
  }
  #mvctree {
    /* 
    TODO: 
    Review why Raphael.js picks up on this value for Element.attr.stroke-width.
    */
    border: 0px solid #000; 
    min-width: 640px;
    height: 100%;
  }
  svg { 
    height: 150%;
    width: 100%; 
  }
  .text_box_info {
    padding-top: 70px; // Equal to header height
  } 
  .text_box_tech {
  }
  #chbox_overlay_all,
  .chbox_overlay {
    -webkit-transform: scale(2);
    transform: scale(2);
    margin: 8px;
  }
  #overlays {
    font-size: 1rem;
  }
</style>

{{partial 'post_header'}}

<div class="row row_max_w">
  <div class="col-xs-12">
    <p>
      Click on each element to learn more about it. Also, you can use the checkboxes below to show or hide different overlays.
    </p>

    <h2>Overlays</h2>
  </div>
</div>

<div id="overlays" class="row row_max_w">
  <div class="col-xs-6 col-sm-3">
    <input id='chbox_overlay_all' type='checkbox' value='all'>
    All 
  </div>
  <div class="col-xs-6 col-sm-3">
    <input id='te_sig' class='chbox_overlay' type='checkbox' value='te_sig'>
    Significant 
  </div>
  <div class="col-xs-6 col-sm-3">
    <input class='chbox_overlay' type='checkbox' value='te_java'>
    Java
  </div>
  <div class="col-xs-6 col-sm-3">
    <input class='chbox_overlay' type='checkbox' value='te_js'>
    JavaScript
  </div>
  <div class="col-xs-6 col-sm-3">
    <input class='chbox_overlay' type='checkbox' value='te_ms'>
    Microsoft
  </div>
  <div class="col-xs-6 col-sm-3">
    <input class='chbox_overlay' type='checkbox' value='te_php'>
    PHP
  </div>
  <div class="col-xs-6 col-sm-3">
    <input class='chbox_overlay' type='checkbox' value='te_python'>
    Python
  </div>
  <div class="col-xs-6 col-sm-3">
    <input class='chbox_overlay' type='checkbox' value='te_ruby'>
    Ruby
  </div>
  <div class="col-xs-6 col-sm-3">
    <input class='chbox_overlay' type='checkbox' value='te_smalltalk'>
    Smalltalk 
  </div>
</div>

<div class="row row_max_w">
  <div class="col-xs-12">
    <div id="mvctree"> <!-- SVG container --> </div>
  </div>
</div>

<div class="row row_max_w">
  <div class="col-xs-12">
    <h2>Design Patterns</h2>
  </div>
</div>

<div id="tmve" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1979 TMVE - Thing Model View Editor</h3>
        Trygve Reenskaug writes a memo, 
        <a href="papers/a-note-on-dynabook-requirements.pdf">
          a note on DynaBook requirements
        </a>
        , that describes his design for a project management task.
        A couple of months later in another memo the 
        <a href="papers/tmve.pdf">thing-model-view-editor</a>
        metaphor is explored. 
  </div>
</div>
</div>

<div id="mvc79" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1979 MVC - Model View Controller</h3>
        Trygve Reenskaug revamps TMVE into <a href="papers/mvc.pdf">MVC</a>.
  </div>
</div>
</div>

<!-- 1987 -->
<div id="pac" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1987 PAC - Presentation Abstraction Control</h3>
        Developed independently from MVC by JoÃ«lle Coutaz in:
        <a href="papers/pac.pdf">
          PAC, an Object Oriented Model for Dialog Design.
        </a>

  </div>
</div>
</div>

<!-- 1988 -->
<div id="mvc88" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1988 MVC - Krasner & Pope</h3>
        Glenn E. Krasner and Stephen T. Pope published a variation of MVC in
        <a href="papers/krasner-pope-88.pdf">
          A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk-80
        </a>.
  </div>
</div>
</div>

<!-- 1993 -->
<div id="am" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1993 Application Model</h3>
        Used in VisualWorks, a Smalltalk implementation done by ParcPlace. 

  </div>
</div>
</div>

<!-- 1995 -->
<div id="observer" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1995 Observer Pattern</h3>
        First described in the book Design Patterns: Elements of Reusable Object-Oriented Software by
        Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides.
        The authors are often referred to as the Gang of Four (GoF).
  </div>
</div>
</div>

<!-- 1996 -->
<div id="mvptaligent" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1996 MVP - Model View Presenter</h3>
        First described by Mike Potel from Taligent Inc. and known as
        <a href="papers/mvp-taligent.pdf">Taligent MVP</a>.

  </div>
</div>
</div>

<!-- 1998 -->
<div id="model2" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1998 Model 2</h3>
        A design pattern used in Java Web applications described in
        <a href="http://www.kirkdorffer.com/jspspecs/jsp092.html#model">
          JavaServer Pages - Specification 0.92
        </a>. A year later after release it was associated with MVC.

  </div>
</div>
</div>

<div id="pm" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2004 Presentation Model</h3>
        Described by Martin Fowler in
        <a href="http://martinfowler.com/eaaDev/PresentationModel.html">
          Development of Further Patterns of Enterprise Application Architecture.
        </a>

  </div>
</div>
</div>

<!-- 2005 -->
<div id="mvvm" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2005 MVVM - Model View ViewModel</h3>
        Described by John Gossman from Microsoft in his blog post:
        <a href="http://blogs.msdn.com/b/johngossman/archive/2005/10/08/478683.aspx">
          Introduction to Model/View/ViewModel pattern for building WPF apps
        </a>. From the beginning it was compared to Presentation Model and later, in 2008, 
        <a href="http://blogs.msdn.com/b/johngossman/archive/2008/05/28/presentationmodel-and-wpf.aspx">
          J. Gossman posted
        </a>:
        <blockquote>
        My opinion at this point is the Model-View-ViewModel pattern is a WPF-specific version of the PresentationModel pattern.
        </blockquote>

  </div>
</div>
</div>

<br>
<br>
<div class="row row_max_w">
  <div class="col-xs-12">
    <h2>Technologies</h2>
  </div>
</div>

<!-- 1995 -->
<div id="msaccess" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1995 MS Access</h3>
  </div>
</div>
</div>

<!-- 1998 -->
<div id="swing" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1998 SWING</h3>
  </div>
</div>
</div>

<!-- 1999 -->
<div id="j2ee" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>1999 J2EE</h3>
  </div>
</div>
</div>

<!-- 2000 -->
<div id="dolphin" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2000 Dolphin</h3>
      <p>
        Dolphin, the Object Arts Ltd implementation of Smalltalk, used MVP as its UI model. 
        The research and reasonings behind that decision are found in a paper by Andy Bower and Blair McGlashan called: 
        <a href="papers/mvp-dolphin.pdf">Twisting the triad</a>, published in 2000.
      </p>
      <p>
        In their research about MVC, they used VisualWorks 2.5 which actually refers to Application Model 
        and in their paper both terms are used interchangeably.
      </p>
      <p>
        A detailed timeline about Dolphin can be fount at:
        <a href="http://www.idb.me.uk/idb/about.html">Ian's Dolphin Smalltalk Pages</a>
      </p>
  </div>
</div>
</div>

<!-- 2000 -->
<div id="struts" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2000 Struts</h3>
  </div>
</div>
</div>

<!-- 2005 -->
<div id="rails" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2005 Rails</h3>
  </div>
</div>
</div>

<!-- 2007 -->
<div id="aspnet" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2007 ASP.NET MVC</h3>
  </div>
</div>
</div>

<!-- 2007 -->
<div id="silverlight" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2007 Silverlight</h3>
  </div>
</div>
</div>

<!-- 2009 -->
<div id="angular" class="text_box_info">
<div class="row row_max_w">
  <div class="col-xs-12">
      <h3>2009 Angular.js</h3>
  </div>
</div>
</div>

<!-- \{{partial 'post_footer'}} -->

<script>
var T = {
  paddingH: 16,
  paddingV: 20,
  colW: 130 + 16, // TODO: hardcoded padding
  rowH: 50 + 20, // TODO: hardcoded padding
  maxCols: 6,
  maxRows: 13,
  getColPos: function(colNum) {
    if ( colNum > this.maxCols ) {
      console.log('COL: null pointer exception, self destruct in 3 2 1');
    }
    return T.paddingH + colNum * T.colW;
  },
  getRowPos: function(rowNum) {
    if ( rowNum > this.maxRows ) {
      console.log('ROW: null pointer exception, self destruct in 3 2 1');
    }
    return T.paddingV + rowNum * T.rowH;
  },

  attr: {
    arrowHead: {
      'fill': '#663c4d',
      'stroke': '#663c4d', 
      'stroke-width': 0
    },
    dashedLine: {
      'stroke': '#464646', 
      'stroke-dasharray': '-',
      'stroke-width': 1.5
    },
    line: {
      'fill': '#663c4d',
      'stroke': '#663c4d', 
      'stroke-width': 1.2
    },
    textRect: {
      'fill': '#FFF', 
      'stroke': '#663c4d', 
      'stroke-width': 1
    },
    textEllipse: {
      'fill': '#CCFF9B', 
      'stroke': '#663c4d',
      'stroke-width': 1 
    },
    textBox: {
      'font-size': 14,
      'font-style': 'italic'
    }
  },

  site: {
    root: $('html, body'),
    checkboxes: $('.chbox_overlay'),
    overlays: null // will populate after all the drawing is done
  },

  toggleTech: function(checkbox, className) {
    var elems = T.site.overlays[className],
        classes = elems.attr('class');

    if ( elems.length === 0) {
      return;
    }

    classes = checkbox.checked ? classes.replace(/hidden/, '') :
                                 classes + ' hidden';
    elems.attr('class', classes);

    //elems.toggleClass('hidden'); // doesn't work
  },

  draw: null, // drawing helpers, redefined below
 
  init: null
};

T.draw = {

_textRect: function(containerNode, textNode, elemId) {

  containerNode.style.cursor = 'pointer';
  textNode.style.cursor = 'pointer';

  containerNode.onclick = function() {
    T.site.root.animate({
      scrollTop: $(elemId).offset().top
    }, 300);
    window.location.hash = elemId;
  };
  textNode.onclick = containerNode.onclick;
},

textEllipse: function(paper, col, row, text, elemId, className) {
  var attr = T.attr.textEllipse,
      strokeW = attr['stroke-width'],
      x = T.getColPos(col) + T.colW / 2,
      y = T.getRowPos(row) + T.rowH - (T.paddingV / 2),
      width = (130 - (strokeW * 2)) / 2,
      height = (50 - (strokeW * 2)) / 2;

  if ( className ) {
    var fillColor = null;
    switch ( className ) {
      case 'te_sig': fillColor = '#FF96F7'; break;
      case 'te_java': fillColor = '#6AF4FF'; break;
      case 'te_js': fillColor = '#FFFD6A'; break;
      case 'te_ms': fillColor = '#7CC2FF'; break;
      case 'te_php': fillColor = '#a184a7'; break;
      case 'te_python': fillColor = '#9BFFA4'; break;
      case 'te_ruby': fillColor = '#FF2E5C'; break;
      case 'te_smalltalk': fillColor = '#FF8F65'; break;
    }
    attr.fill = fillColor;
  }
  var ellipse = paper.ellipse(x, y, width, height)
                     .attr(attr);
  var text = paper.text(x, y, text)
                  .attr(T.attr.textBox)
                  .toFront();
  if ( className ) {
    className += ' hidden';
    $(ellipse.node).attr('class', className);
    $(text.node).attr('class', className);
  }
  this._textRect(ellipse.node, text.node, elemId);
},

textRect: function(paper, col, row, text, elemId) {
  var attr = T.attr.textRect,
      strokeW = attr['stroke-width'],
      x = T.getColPos(col) + strokeW + T.paddingH/2,
      y = T.getRowPos(row) + strokeW + T.paddingV/2,
      width = 130 - (strokeW * 2),
      height = 50 - (strokeW * 2);

  var rect = paper.rect(x, y, width, height, 7)
                  .attr(attr);
  var text = paper.text(x + width/2, y + height / 2, text)
                  .attr(T.attr.textBox)
                  .toFront();

  this._textRect(rect.node, text.node, elemId);
},

yearLine: function(paper, col, row, length, year) {
  var x = T.getColPos(col),
      y = T.getRowPos(row),
      fontS = 12;
  paper.text(x + fontS, y, year)
       .attr({'font-size': fontS});

  x = 4 * fontS; // 4 chars
  paper.path('M '+x+' '+y+' H ' + length);
},

lineH: function(paper, attr, col, row, colsCount) {
  var x = T.getColPos(col),
      y = T.getRowPos(row) + T.rowH / 2,
      pos = x + (colsCount * T.colW);
  paper.path('M '+x+' '+y+' H' + pos)
       .attr(attr);
},

lineV: function(paper, attr, col, row, rowsCount) {
  var x = T.getColPos(col) + T.colW / 2,
      y = T.getRowPos(row),
      y2 = y + (rowsCount * T.rowH);
  paper.path('M ' + x + ' ' + y + ' V' + y2)
       .attr(attr);
},

/* bind, with a line, a row with the one below it */
bindRows: function(paper, attr, col, row) {
  var hp = T.paddingV / 2,
      x = T.getColPos(col) + T.colW / 2,
      y = T.getRowPos(row) + T.rowH - hp;
  return 'M ' + x + ' '+ y +' V ' + (y + hp) + ' ';
},

arrowV: function(paper, attr, col, row) {
  var x = T.getColPos(col) + T.colW / 2,
      y = T.getRowPos(row),
      hp = T.paddingV / 2,
      px1 = x - hp,
      px2 = px1 + T.paddingV,
      y2 = y + hp;
  return 'M ' + px1 + ' ' + y +
         ' H ' + px2 + ' ' +
         ' L ' + x + ' ' + y2 + 'Z ';
},

/*
  Asumes the second cell is always to the right.
*/
bindTwoCells: function(paper, col1, row1, col2, row2) {
  var attr = T.attr.dashedLine,
      halfPaddingH = T.paddingH / 2,
      halfRow = T.rowH / 2,
      x1 = T.getColPos(col1) + T.colW, 
      y1 = T.getRowPos(row1) + halfRow, 
      vDir = row1 < row2 ? 1 : -1,
      hDelta = col2 - col1 - 1,
      vDelta = Math.abs(row1 - row2),
      h1 = x1 + T.colW * hDelta,
      v1 = y1 + ((T.rowH * vDelta - halfRow) * vDir); 
  paper.path('M' + (x1 - halfPaddingH) + ' ' + y1 +
             'H' + x1 +
             'V' + v1 +
             'H' + h1 +
             'V' + (v1 + halfRow * vDir) +
             'H' + (h1 + halfPaddingH)
            ) 
       .attr(attr);
}

}; // T.draw, drawing helpers

T.init = function() {

  var w = T.getColPos(T.maxCols) + T.colW;
  var h = T.getRowPos(T.maxRows) + T.rowH;

  // Raphael (at least as of 2.1.0) always sets a fixed width/height i
  // *on canvas creation* (reflected in 'width' and 'height' HTML attributes) - 
  // if you don't specify width and height, the canvas will be sized to fully 
  // fill its container. Fortunately, though, CSS-based width/height 
  // specifications take precedence (see 'svg' style) and thus allow for dynamic resizing.
  var HTMLElement = $('#mvctree')[0];
  var paper = Raphael(HTMLElement);

  // Set the view box, which effectively activates scaling.
  paper.setViewBox(0, 0, w, h, false);

  // !! As of Raphael 2.1.0, specifying true as the `fit` parameter to `setViewBox()` 
  // translates into an invalid value for the SVG `preserveAspectRatio` attribute: "meet". 
  // To rule out this problem, we set that attribute directly.
  // always scale to fill container, without preserving aspect ratio.
  //paper.canvas.setAttribute('preserveAspectRatio', 'true'); 

  for (var x = 0 + T.paddingH; x < w; x += T.colW) {
    paper.path('M '+x+' 0 V ' + h)
         .attr({'stroke': '#909090'});
  }
  for (var y = 0 + T.paddingV; y < h; y += T.rowH) {
    paper.path('M 0 '+y+' H ' + w)
         .attr({'stroke': '#909090'});
  }

  T.draw.yearLine(paper, 0, 2, w, '1980');
  T.draw.yearLine(paper, 0, 4, w, '1990');
  T.draw.yearLine(paper, 0, 8, w, '2000');
  T.draw.yearLine(paper, 0, 13, w, '2010');

  T.draw.textRect(paper, 0, 0, 'TMVE\n1979 - Reenskaug', '#tmve');
  T.draw.textRect(paper, 0, 1, 'MVC\n1979 - Reenskaug', '#mvc79');
  T.draw.textRect(paper, 0, 3, 'MVC\n1988 - K. & P.', '#mvc88');
  T.draw.textRect(paper, 1, 6, 'MVP\n1996 - Taligent', '#mvptaligent');
  T.draw.textRect(paper, 2, 9, 'Presentation Model\n2004 - Fowler', '#pm');
  T.draw.textRect(paper, 4, 2, 'PAC\n1987 - Coutaz', '#pac');
  T.draw.textRect(paper, 0, 7, 'Model 2\n1998 - J2EE', '#model2');
  T.draw.textRect(paper, 4, 9, 'MVVP\n2004??', '');
  T.draw.textRect(paper, 6, 5, 'Observer Pattern\n1995 - GoF', '#observer');

  T.draw.textRect(paper, 2, 4, 'Application Model\n1993 - VisualWorks', '#am');
  T.draw.bindTwoCells(paper, 2, 9, 3, 10);

  T.draw.textRect(paper, 3, 10, 'MVVM\n2005 - Microsoft', '#mvvm');
  T.draw.textRect(paper, 5, 4, 'Data Binding\n1995??', '');
  T.draw.bindTwoCells(paper, 3, 10, 5, 4);

  /* Technologies */

  T.draw.textEllipse(paper, 5, 4, 'MS-Access\n1995', '#msaccess', 'te_ms');
  T.draw.textEllipse(paper, 1, 8, 'Dolphin\n2000', '#dolphin', 'te_smalltalk');
  T.draw.textEllipse(paper, 0, 8, 'Struts\n2000', '#struts', 'te_java');
  T.draw.textEllipse(paper, 0, 10, 'Django\n2005', '#struts', 'te_python');
  T.draw.textEllipse(paper, 0, 10, 'ASP.NET MVC\n2007', '#aspnet', 'te_ms');
  T.draw.textEllipse(paper, 3, 10, 'Silverlight\n2007', '#silverlight', 'te_ms');

  T.draw.textEllipse(paper, 0, 9, 'Rails\n2003', '#rails', 'te_ruby');
  T.draw.textEllipse(paper, 2, 11, 'Angular.js\n2009', '#angular', 'te_js');
  T.draw.textEllipse(paper, 0, 6, 'SWING\n1998', '#swing', 'te_java');

  T.draw.textEllipse(paper, 0, 9, 'Rails\n2003', '#rails', 'te_sig');
  T.draw.textEllipse(paper, 2, 11, 'Angular.js\n2009', '#angular', 'te_sig');
  T.draw.textEllipse(paper, 0, 6, 'SWING\n1998', '#swing', 'te_sig');

  var attr = T.attr.line;
  var path = T.draw.bindRows(paper, attr, 0, 0);
  paper.path(path).attr(attr);

  attr = T.attr.arrowHead;
  path = T.draw.arrowV(paper, attr, 0, 1); // mvc
  paper.path(path).attr(attr);
  path += T.draw.arrowV(paper, attr, 0, 3); // mvc k&p
  paper.path(path).attr(attr);
  path += T.draw.arrowV(paper, attr, 0, 5); // mvc continues
  paper.path(path).attr(attr);
  path += T.draw.arrowV(paper, attr, 1, 6); // mvp taligent
  paper.path(path).attr(attr);
  path += T.draw.arrowV(paper, attr, 2, 4); // am 
  paper.path(path).attr(attr);
  path += T.draw.arrowV(paper, attr, 2, 9); // pm
  paper.path(path).attr(attr);
  path += T.draw.arrowV(paper, attr, 3, 10); // mvvm
  paper.path(path).attr(attr);

  attr = T.attr.line;
  T.draw.lineV(paper, attr, 0, 2, 1); // mvc
  path = T.draw.bindRows(paper, attr, 0, 1);
  paper.path(path).attr(attr);

  T.draw.lineV(paper, attr, 0, 4, 1); // mvc continues
  T.draw.lineH(paper, attr, 1, 3, 2.515);
  T.draw.lineV(paper, attr, 1, 4, 2); // mvp taligent

  T.draw.lineV(paper, attr, 1, 3.5, 0.5);
  T.draw.lineV(paper, attr, 2, 3.5, 0.5);
  path = T.draw.bindRows(paper, attr, 2, 4); // application model
  paper.path(path).attr(attr);

  T.draw.lineV(paper, attr, 3, 3.5, 0.5);
  T.draw.lineV(paper, attr, 2, 5, 4);
  T.draw.lineV(paper, attr, 3, 4, 6);

  T.site.overlays = { // populated after all the drawing was done
      'te_sig': $('.te_sig'),  
      'te_java': $('.te_java'), 
      'te_js': $('.te_js'), 
      'te_ms': $('.te_ms'), 
      'te_php': $('.te_php'), 
      'te_python': $('.te_python'), 
      'te_ruby': $('.te_ruby'), 
      'te_smalltalk': $('.te_smalltalk') 
  };

  T.site.checkboxes.each(function(index, element) {
    var elem$ = $(element), 
        className = elem$.attr('value');

    elem$.on('click', function () {
      T.toggleTech(this, className);
    });
  });

  $('#chbox_overlay_all').change(function() {
    var isChecked = this.checked;
  
    T.site.checkboxes.each(function(index, element) {
      var chbox$ = $(element); 
      if ( isChecked !== element.checked ) {
        chbox$.click();
      }
    });

  });

  $('#te_sig').click();

  $('#chbox_overlay_all').click();

}; // T.init

$(document).ready(function() {
  T.init();
}); 
</script>
